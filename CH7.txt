Integer types
- value of an integer type is a whole number
- signed and unsigned integer (leftmost bit of a signed integer is 0 if it is positive or zero)
! default is signed
- short and long; int 타입이 차지하는 메모리 크기가 차이남
- short unsigned 처럼 섞어서 쓸 수도 있으며 이때 순서는 상관없다 (short unsigned int === unsigned short int)
- int를 아예 생략할 수도 있다 (short int === short)

- short int , int, long int 가 차지하는 메모리 크기는 기계마다 다르나 일반적인 규칙은 있다
  - short int 는 항상 int 보다 작거나 같다
  - long int 는 항상 int 보다 크거나 같다
  ! <limits.h> 헤더에는 각 타입의 최대,최소값이 나와있다; 표준라이브러리의 일부이다
! C99에서는 long보다 긴 long long 도 제공한다 (최소 64비트)
! 컴파일러에 따라 128비트크기의 정수타입을 사용하기도 한다 (implemetation-defined)

integer constants
- Decimal, Octal (start with 0) , Hexadecimal (begin with 0x; the letters can be upper or lower case)
- 어떤 진법으로 표현되든 메모리에는 항상 이진수로 저장되므로 저장되는 것에는 차이가 없다
- type of decimal integer is usually int; 너무 크면 long int, 더 크면 unsigned long int 로 저장됨
- octal, hexadecimal 은 unsigned int를 한 번 거친다는 차이점이 있다
- force the compiler to treat a constant as a long integer
  - follow it with the letter L(or l)
  - 15L , 0377L, 0x7fffL
- force the compiler to treat a constant as an unsigned integer
  - U를 붙인다
  - 15U, 0377U
- U와 L을 동시에 붙일 수도 있고 순서도 상관없다
- LL for long long int in C99

Integer Overflow
- integer is too large to represent
- overflow of signed integer is undefined, but which of unsigned integer is defined (modulo 2^n)

Reading and Writing Integer
- unsigned integer; use the letter u, o, or, x instead of d
- short integer; put the letter h in front of d, o, u, or x
- long integer; put the letter l in front of d, o ,u, or x
- long long integer; put the letter ll in front of d, o, u, or x (C99 only)

Floating Types
- three floating types (float, double, long double)
- float 에서 long double 로 갈수록 정밀도가 증가하지만 얼마나 정밀한지는 C에서는 정의하지 않고 있다
! reference "https://docs.oracle.com/cd/E19957-01/800-7895/800-7895.pdf" (더럽게 복잡함 ㄷㄷ...)
- normalized
  - d.dddd X b^n 의 형태에서 첫번째 자릿수가 0이 아닌 형태를 말한다
- <floats.h> 헤더는 floating type의 특성을 정의해놓고 있다
- C99에서는 기존의 floating type을 real floating types라 하고 complex types라는 다른 타입도 제공하고 있다 (float _Complex, double _Complex, long double _Complex)

Floating constants
- must contain a decimal point and/or an exponent
- exponent indicates the power of 10 by which the number is to be scaled
  57.0E-2 .57e+2
- default is double (f for float, l for long double)
- C99에서는 0x를 붙임으로써 hexadicimal floating-point constant(!) 를 표현할 수 있다고 한다. 많이 쓰지는 않는다고 하지만...

Reading or writing Floating-point number
- double
  - put the letter l in front of e, f, or g
  %lf %le %lg
! scanf 에서는 l을 붙이지만 printf에서는 l을 붙이지 않는다 (C99에서는 붙이는 것이 허용되지만 이것도 필수적인 것은 아니다)
- long double
  - put the letter L in front of e, f, or g
  %Lf %Le %Lg

Character types
- char
- a variable of type char can be assigned any single character
- character constants are enclosed in single quotes ''

Operation in Characters
- C treats characters as small integers
- char을 정수로 다룰 수 있기 때문에 signed char과 unsigned char로 나뉜다

Escape sequence
- character escape amd numeric escape
- character escape은 \n이나 \t 처럼 아스키 코드에 나와있으나 키보드로 칠 수 없다든지 아니면 보이지 않는다든지 그런 문자들을 위해 있는 것이다
- numeric escape
  - octal escape sequence
    \33 \033 (꼭 0이 들어갈 필요는 없다; 뒤의 숫자는 8진수이다)
  - hexadecimal escape sequence
    \x1b \x1B (x는 반드시 들어가야 한다; 뒤의 숫자는 16진수이다)
- #define을 통해 이름을 부여하는 것도 좋은 방법
  #define ESC '\33' /*ASCII esacpe character*/
- <ctype.h> 헤더의  toupper() 함수로 대문자로 바꿀 수 있다

Reading and Writing Characters
- %c conversion specifier
- 문자를 읽을 때는 공백을 건너뛰지 않기 때문에 공백을 건너뛰고 싶다면 scanf함수의 입력문자열 안에 공백을 넣을 필요가 있다
  " %c"

getchar and putchar
putchar(ch); 로 ch 안에 저장되어 있는 문자 값을 출력
getchar(); 로 문자 하나를 읽고 반환 (정수형으로 반환됨)

Type conversion
- 컴퓨터 내에서의 연산은 같은 크기의 같은 자료형의 수끼리만 연산이 가능하지만 C에서는 다른 자료형끼리도 연산이 가능하다
- implicit conversion 은 프로그래머의 개입없이 컴파일러가 알아서 형변환을 하는 경우를 의미한다
- explicit conversion은 cast operator를 사용해서 직접 형변환을 하는 경우다

implicit conversion이 일어나는 경우
- 산술이나 논리연산에서 다른 형이 쓰인 경우
- 할당 연산자의 우측표현식이 왼쪽 변수와 형이 다른 경우
- 함수의 인자와 변수의 형이 맞지 않는 경우
- return 문의 반환값의 형이 함수의 반환값의 형과 다른 경우

