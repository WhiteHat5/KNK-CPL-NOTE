<Structure variables>
- the elements of a structure (its members) are not required to have the same type
- the members of a structure have names (배열과는 다르게 원소에 접근하려면 위치가 아니라 이름으로 접근해야 한다)

<Declaring structure variables>
- 관련있는 데이터들을 묶음으로 저장할 필요가 있을 때 구조체를 사용한다
- 구조체의 멤버들은 '선언된 순서대로' 메모리에 저장된다
* 메모리에 저장될 때 특정 컴퓨터들은 2,4,8 바이트마다 데이터가 정렬되도록 하므로 멤버들 사이에 빈 공간이 있거나 구조체 끝에 빈 공간이 있기도 하다 (sizeof 로 크기를 재보면 멤버들의 메모리크기 합보다 클 때가 있는 이유이다. 메모리 처음에는 빈 공간이 올 수 없다)
- Each structure represemts a new scope
	- 한 구조체에서 사용된 멤버이름이 다른 구조체에서도 사용될 수 있다
	- C용어로는 각 구조체가 그 멤버들에 대해 별개의 namespace를 가진다고도 표현한다
	
<Initializing structure variable>
- 배열을 초기화할 때처럼 선언 시 {}안에 멤버들을 넣어 초기화할 수 있다. (멤버들은 선언한 순서대로 정렬되어 있어야 한다)
- C89에서는 상수로만 멤버를 초기화할 수 있다 (C99에서는 또 다르다고 하네용)
- 초기화에 쓰인 {} 안에 들어있는 멤버 개수가 구조체 멤버 개수보다 적으면 초기화가 되지 않은 나머지 멤버들은 모든 비트가 0인 데이터로 초기화된다

<Designated Initializer>
- 배열과 비슷한 방식으로 멤버를 특정하여 초기화하는 것이 가능하다
{.number = 528 , .name = "Disk Drive", .on_hand = 10}
- 점과 멤버이름을 조합하여 만드는 designator로 멤버를 특정한다
- designator를 사용하면 초기화하는 멤버 순서가 원래 선언 순서와 달라도 상관 없다
- designator를 사용한 멤버와 사용하지 않은 멤버를 혼합해 사용할 수도 있다. 이 경우 순서는 designator를 사용한 멤버 바로 다음 순서부터 시작하는 것. (배열 원소 초기화 시 규칙과 흡사하다)

<Operation on structures>
- 구조체 멤버의 접근은 구조체_이름.구조체_멤버_이름 과 같이 구조체 이름 뒤에 점을 붙이고 멤버이름을 써서 접근한다
- 구조체 멤버는 lvalue이므로 값의 변경이 가능하다
- 구조체 멤버 앞에 붙는 .은 사실 연산자이다. ++와 같은 precedence를 가지고 있으므로 거의 모든 연산자보다 우선해서 실행된다고 보면 된다

- 배열과는 다르게 구조체는 = 연산이 가능하다
	- part1과 part2라는 구조체가 있으면 part1 = part2; 같은 게 가능하다는 소리다
	- 심지어 배열이 구조체의 멤버면 배열도 전부 복사된다...
	- 대신에 =를 사용할 수 있는 건 두 구조체가 compatiable type일 경우 한정이다
	- 그래도 ==나 != 같은 건 안된다 
	* 구조체의 특성상 멤버들 사이에 빈 메모리 공간이 있을 수 있는데 이 메모리 공간이 항상 0으로 채워져 있는 것이 아니고 아무 쓸모없는 값으로 채워져 있는 경우가 대다수이기 때문에 직접 비교 연산을 하면 같은 구조체더라도 다른 값이 나올 수 있다. 이 때문에 비교 연산을 하지 못한다

<Structure types>
- 구조체 타입이 같은 변수를 여러 개 선언하고 싶은데 변수들의 선언 시점을 다르게 하고 싶을 수 있다
- 이 경우 구조체 변수 선언을 여러 번 하면 프로그램이 쓸데없이 길어질 뿐더러 두 변수가 compatiable type이 아니라고 인식되기 때문에 =연산자를 사용할 수가 없다
- 이 문제를 해결하기 위해 구조체 변수의 이름이 아니라 구조체 변수의 타입의 이름을 지정할 필요가 있다
- structure tag 나 typedef를 사용하여 구조체타입이름을 지정할 수 있다

<Declaring a structure tag>
- is a name used to identify a particular kind of structure
- struct 뒤에 struct tag를 붙여서 구조체 이름을 짧게 표현할 수 있다
struct part {
	int member;
	char name[NAME_LEN+1];
	int on_hand;
}; // 세미콜론으로 반드시 마무리를 지어줘야 한다
- 선언 후에 struct part part1; 같은 식으로 struct part라는 타입을 가진 part1 구조체변수를 선언할 수 있다
	- struct를 빼고 part part1; 같은 식으로 선언하는 것은 불가능하다. //struct를 뺀 part는 아무 의미가 없기 때문에 변수 이름을 이걸로 설정해도 된다... 물론 가독성이 망하겠지만
* 구조체 선언과 구조체 변수 선언을 같이 해도 된다. (int를 예로 들면 int a = 7; 이라고 해도 된다는 것과 같은 소리)

<Defining a structure type>
- 구조체 앞에 typedef를 붙이고 뒤에 구조체 이름을 붙여서 구조체의 타입이름을 정의할 수 있다
typedef struct {
	int member;
	char name[NAME_LEN+1];
	int on_hand;
} Part; //Part라는 구조체타입을 선언했다
- Part가 하나의 타입이므로 struct Part는 타입이 아니다
- 연결 리스트에서는 사용할 수 없다고 하네용
* structure tag와 typedef를 같이 사용해도 되고 이름도 똑같아도 문제없다

<Structures as arguments and return values>
- 구조체를 arguments 나 반환값으로 사용하는 경우 구조체의 모든 멤버의 복사본을 사용하게 되므로 프로그램에 쓸데없는 오버헤드를 강요한다
- 이걸 막기 위해 구조체가 클 경우 구조체의 포인터를 사용하는 경우도 있다
- 같은 구조체 타입을 사용하고 있으면 매개변수로 함수 안의 구조체를 초기화할 수도 있다.

<Compund literals>
- 구조체 변수 이름을 선언하지 않고 바로 사용할 수도 있다
print_part( (struct part) {528, "Disk Drive" , 10} ); //print_part함수에 struct part 타입의 구조체를 전달한다
- designator 도 사용할 수 있다

<Nested arrays and structures>
- structures and arrays can be combined without restriction (구조체의 멤버가 배열이 될 수도 있고 배열의 원소가 구조체가 될 수도 있다)

<Nested structures>
- 구조체의 멤버로 구조체 변수를 둘 수 있다
- 이 경우 관련있는 멤버들을 묶어 한 번에 관리하므로 함수에 전달할 때나 값을 할당할 때 적은 줄의 코드가 필요하다는 장점이 있다.

<Arrays of structures>
- 구조체로 이루어진 배열
- 구조체가 배열의 원소이기 때문에 []를 이용한 subscripting으로 접근하고 다시 .으로 구조체의 멤버에 접근할 수 있다
inventory[i].number = 3; //inventory라는 구조체 배열의 i번째 구조체 변수의 number 멤버의 값을 3으로 변경

<Initializing an array of structures>
- 구조체배열의 초기화는 다차원 배열의 초기화와 비슷하다
- 각 구조체를 {}로 감싼 멤버들의 집합으로 표현한다
- 구조체 자체에 대한 designator와 구조체의 멤버에 대한 designator를 혼용해서 사용해도 된다
struct part inventory[100] = 
	{[0].number = 528, [0].on_hand = 10, [0].name[0] = '\0'}; //마지막에 가서는 배열에서의 위치, 구조체에서 name, name에서의 위치 를 나타내기 위해 3개의 designators를 사용했다 

<Unions>
- compiler allocates only enough space for the largest fo the members
- the members of a union are stored at the same address; the members of a structure are stored at  different addresses in memory 
- union의 선언 방식과 멤버접근 방식은 구조체에서 struct를 union으로 바꾸기만 하면 된다
- 공용체의 한 멤버의 값을 변경하는 것은 다른 모든 멤버의 값도 변경한다
- union 도 structure 처럼 union tag 나 union type을 사용할 수 있다
- 초기화의 경우는 다른데 {} 안에 든 값은 공용체의 첫번째 멤버의 값만 변경할 수 있다. (C89의 경우에는 상수로만 초기화를 할 수 있다)
- .member 처럼 .연산자를 {} 안에 넣어서 특정 멤버를 초기화할 수 있다 (designated initializer)
	- 이때도 한 멤버만 초기화할 수 있다

<Using unions to save space>
- 여러 종류의 정보를 한 가지 타입에 담고 싶을 때 공용체를 활용할 수 있다.
- 공용체의 멤버를 구조체로 설정하면 공용체 안의 구조체 안의 멤버 별로 접근할 수 있어서 유형에 맞는 여러 구조체 '세트'를 준비해놓고 그때그때 다른 유형의 데이터를 넣을 수 있다.
	- 2개 이상의 구조체가 공용체의 멤버이고 구조체들이 하나 이상의 matching member를 가지고 있으면 (need to be in the same order and have compatiable type) 한 구조체의 멤버에 데이터가 들어가있을 때 다른 구조체의 그 멤버에 접근해도 같은 값을 얻을 수 있다
	- 예를 들어 item이라는 공용체에 mug와 shirt라는 두 구조체가 들어가 있고 둘 다 int type의 number멤버를 가지고 있으면 mug.number 는 shirt.number와 같다. (멤버의 이름이 같을 필요는 없다)

<Using unions to build mixed data structures>
- 예를 들어 정수형과 double 형이 섞인 배열을 만들고 싶을 때 사용할 수 있다

<Adding a "Tag Field" to a union>
- 공용체는 현재 멤버 중에 "쓸모있는 값" 이 뭔지 판별할 수 있는 방법이 없다. (현재 메모리에 저장되어 있는 값 중 마지막으로 저장되어 의미있는 값을 출력할 수 있는 멤버가 뭔지 모른다는 소리다)
- 이를 공용체와 Tag field를 멤버로 가지는 구조체를 선언함으로써 해결할 수 있다
- tag field는 공용체에 현재 무슨 값이 저장되어 있는지 판별하는 역할을 한다
- tag field는 프로그램에서 수동으로 바꿔줘야 하는 값이다. 자동으로 바뀌지 않는다. 체크하는 것은 프로그래머의 몫이다.

<Enumeration>
- 변수들 중에는 값의 범위가 아주 작은 경우도 있다. (Boolean이나 카드 문양을 저장하는 변수 등을 생각해보자)
- enumerated type is a type whose values are listed by the programmer, who must create a name (an enumerated constant) for each of the values
enum {CLUBS, DIAMONDS, HEARTS, SPADES} s1, s2; //variable for card suits
	- enumeration constant의 이름은 같은 scope에서 중복되지 않아야 한다. (구조체나 공용체의 멤버 이름이 중복돼도 되는 것과 비교된다)
	* enumeration constants 마지막에 ,로 끝내도 된다. C99한정.

<Enumeration tags and type names>
- 열거형도 구조체나 공용체처럼 enumeration tag나 typedef를 사용해서 타입을 줄여 쓸 수 있다

<Enumeration as Integers>
- C는 열거형 변수를 정수형으로 다룬다
- 기본적으로 enumeration constants에는 0,1,2,...로 시작하는 정수값이 할당된다
- designated initializer와 비슷한 방식으로  enumeration에도 순서 상관없이 값을 할당할 수 있다 (심지어 다른 enumeration constant에 같은 값을 할당하는 것도 가능하다)
- 열거형 변수가 그냥 범위가 좁은 정수형 이라는 것을 이용해 정수같은 연산을 할 수도 있다 (정수를 더하거나 ++를 사용하거나 등등)
* 열거형 변수로 정수식 연산을 할 때는 열거형 변수의 범위를 넘어서지 않도록 주의해야 한다

<Using enumerations to declare "tag fields">
- 공용체의 tag field는 열거형을 사용하기에 아주 좋은 변수이다 (몇 개 안되는 값 중 하나를 값으로 가지니까)


