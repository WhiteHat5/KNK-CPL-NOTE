<Source files>
- 한 프로그램은 여러 개의 소스 파일로 이뤄진다
- 각 소스파일은 main 함수를 반드시 포함한다
- 여러 개의 소스 파일을 두면
	- 프로그램의 구조가 명확해진다
	- 프로그램 조각을 각각 컴파일할 수 있어 전체를 컴파일하느라 시간을 낭비하지 않아도 된다
	- 소스파일을 재사용하기 쉽다

<Header files>
- #include directive 는 전처리기로 하여금 특정 파일을 열어 그 내용을 현재 파일에 삽입하게 한다
- 여러 소스파일로 하여금 한 정보에 접근 가능하도록 만들고 싶을 수 있는데 이 정보를 담은 파일을 헤더 파일이라고 한다
	- 상수 혹은 타입 정의가 들어간 파일을 여러 소스파일에서 사용하고 싶을 때 헤더파일을 사용할 수 있다

<The #include directive>
- has two forms
#include <filename> //C 자체 라이브러리에 있는 헤더파일을 사용할 때
#include "filename" //다른 모든 헤더파일을 사용할 때
- <>의 경우 시스템 헤더 파일이 있는 파일경로를 탐색하고 ""의 경우 현재 파일 경로를 탐색하고 그 다음에 시스템헤더 파일이 있는 파일경로를 탐색한다
* 이식성을 위해서는 파일경로를 직접 지정하지 않는 것이 좋다 (시스템마다 파일경로를 나타내는 방식이 다르기 때문); 절대적인 파일경로보다는 상대적인 파일경로를 사용!
** 헤더파일이 ""를 사용하긴 하지만 문자열로 인식되지 않는다. 따라서 escape sequence가 작동하지 않는다
- #include 뒤에 <> 또는 ""로 감싸진 파일 이름이 아니라 토큰(매크로)가 올 때도 있다
	- 이 경우 전처리기가 매크로를 치환하고 나면 정상적으로 <> 또는 ""가 나와야 한다
*** #include 로 헤더파일이 아닌 소스파일을 포함할 수도 있는데 왜 그러지 않는가? 소스파일에는 정의가 들어가기 때문에 여러 번 정의되는 에러가 뜰 수 있다! 이를 더 명확히 구분하기 위해 헤더를 따로 구분하는 것도 있는 셈

<Sharing function prototype>
- 다른 파일에서 정의된 함수를 호출할 때는 함수의 프로토타입이 먼저 나왔는지를 확인해야 한다
- 함수의 프로토타입을 작성하고 헤더파일에 포함시켜 '함수를 호출할' 소스파일에 포함시켜 프로토타입을 하나로 묶어 관리할 수 있다.
	- 이 경우 '함수가 정의된' 파일에 이 헤더파일이 들어가 있는 게 중요한데 이는 함수의 프로토타입과 항수의 정의를 일치시키기 위해서이다 (같은 파일에 들어있을 경우 제대로 에러메세지가 뜨므로 유용함)
	- 가장 기본적인 구조로 만들면 
		1) 함수들의 프로토타입이 정의된 헤더파일 
		2) 1)의 헤더파일을 포함하고 이 함수들의 정의를 가지고 있는 소스파일 
		3) 1)의 헤더파일을 가지고 있고 2)의 함수를 호출할 메인파일 

<Sharing variable declaration>
- 우리가 지금까지 해왔던 변수 정의방식은 변수의 선언과 정의를 동시에 하는 것이기 때문에 메모리 공간이 자동으로 설정되었다.
- extern 을 이용해 변수를 선언만 하고 정의는 하지 않음으로 메모리 공간을 할당하지 않을 수 있다
extern int i; //extern은 변수 i가 다른 곳에서 정의되었음을 의미한다
- extern으로 배열을 선언할 때는 배열의 길이를 정할 필요가 없다 (메모리 공간이 어차피 할당 안 되기 때문에)
extern int a[];
- extern을 이용해 변수를 각각 다른 소스파일에서 선언하면서도 정의는 따로 다른 소스 파일에 빼놓아 선언할 때마다 메모리공간을 할당하는 것을 막을 수 있다.
* 함수의 선언이 여러 파일에서 발생할 경우 컴파일러는 선언과 정의가 맞는지 확인할 수 없으니 주의 (한쪽에서는 long 변수를 선언했는데 다른 쪽에서는 int로 정의를 했을 수 있다는 것)
** 이걸 막기 위해 선언을 하나의 헤더파일에 저장하고 헤더파일을 소스파일에 포함시키는 방식을 사용한다
*** 이렇게 변수를 공유하는 방식이 쓸모있긴 한데 단점도 커서 19장에서 공통변수를 안 쓰는 방식을 또 알려준댜...

<Nested includes>
- 헤더파일 안에 또 헤더파일을 포함시킨다
* C 프로그래머들이 좋아하지 않는 방식이긴 한데 C++에서는 또 많이 쓴다네용

<Protecting header files>
- Nested includes 의 경우 헤더 파일을 중복해서 포함시키기가 쉽다 
- 이 경우 파일에 type definition이 들어가 있으면 컴파일 에러가 난다
- 헤더파일 안에 중복체크를 위한 매크로를 하나 정의해놓고 #ifndef로 이 매크로가 정의되었는지를 검사해서 헤더파일의 포함 여부를 결정할 수 있다

<#error directives in header files>
#ifndef __STDC__
#error This header requires a Standard C compiler
#endif
- 위 코드로 C표준을 필요로 하는 헤더가 freestanding 환경에서 에러를 띄우게 만든다

<Dividing a program into files>
- main 함수는 프로그램의 이름이 파일 이름인 C 파일에 들어간다
- main 함수가 포함된 파일에 있는 함수는 다른 파일에서 호출할 수 없다
- input redirection
justify <quote
	- <는 justify 가 quote 파일에서 입력을 읽도록 한다
- output redirection
justify <quote >newquote
	- >는 justify의 출력이 newquote에 저장되도록 한다
	
* 아예 다른 얘기이긴 한데 마트에서 물건 계산할 때 가끔 커다란 바를 레일 위에 올려놓아서 물건을 구분하기도 하잖? 이게 string으로 따지면 null char의 역할을 하는 것 같지 않남

<Building a multiple-file program>
- building a large program
	- compiling
		- 소스파일이 각각 컴파일되어 object file로 변환된다
		- 헤더파일은 소스파일에 포함되어 컴파일되므로 컴파일하지 않아도 된다
	-Linking
		- 앞서 만든 object files 를 합쳐 실행가능한 파일을 만든다
		- 다른 파일에서의 함수나 변수 호출을 처리한다
- gcc 컴파일러에서는 아래와 같은 방식으로 multiple-file program을 컴파일 할 수 있다

<Makefiles>
- 커맨드 라인에 모든 소스파일을 입력하는 것은 파일이 많아지면 힘들어질 수 있다
- 복잡한 프로그램을 쉽게 빌드하기 위해서 UNIX 체제에서는 makefile이라는 것을 도입했다
- makefile이란 프로그램을 빌드하기 위해 필요한 정보를 모아놓은 파일을 의미한다
	- 프로그램의 일부인 파일들을 포함한다
	- 파일 간의 dependencies 를 표시한다
	* foo.c 가 bar.h 를 포함하면 bar.h 에 변화가 있을 때 foo.c를 다시 컴파일해야 하므로 foo.c depends on bar.h 라고 표현한다
- makefile은 여러 개의 rule로 이루어져 있으며 이는 다음과 같은 형식이 일반적이다
target_file : files_target_file_depends_on
			  command_line_to_compile_target_file // 이상 2줄을 합쳐서 rule이라고 부른다
- makefile 은 "Makefile" 또는 "makefile" 이라는 이름으로 저장되며 make utility가 사용되면 자동으로 현재 디렉토리에서 이런 이름을 검색한다
- make "메인파일 이름" 커맨드로 파일을 컴파일 할 수 있다
* makefile이 여기서 설명한 것만큼 간단한 건 아니라는 것에 유의. 또한 프로그램 관리도구에 makefile만이 있는 건 아니라는 것에도 유의.

<Errors during linking>
- 오타 // 이건 그냥 변수를 못 찾겠다고 뜨기 때문에 알기가 쉽다
- missing file //makefile 이나 project file에서 dependencies를 제대로 명시하고 있는지를 확인
- missing libraries //gcc의 경우 수학 라이브러리를 따로 관리하는 경우가 많아서 libc 가 아니라 libm 에 들어있을 수 있다고 하네용. 그래서 컴파일 시 -lm 옵션을 붙여주라고 하네용... 링커부분에서 에러가 나는 듯. 이게 맞는지는 모르겄다

<Rebuilding a program>
- 프로그램개발과정 중 매번 모든 파일을 컴파일해야 하는 건 아니고 일부 수정된 파일들만 컴파일하여 테스트하는 것이 일반적이다
- makefile 이 이 과정에서 도움을 준다. make를 사용하면 수정된 파일들의 dependencies를 자동으로 추적하여 파일들 중 일부만 골라서 컴파일한다

<Defining macros outside a program>
- -D 옵션을 이용해 컴파일할 때 매크로를 정의할 수 있다 (정의 삭제는 -U)
gcc -DDEBUG=1 foo.c


