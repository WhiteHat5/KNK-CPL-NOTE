<Declaration syntax>
- declarations furnish information to the compiler about the meaning of identifiers
declaration-specifiers delarators ;
- declaration-specifiers 는 선언되는 변수나 함수의 속성을 설명한다
* storage class가 가장 먼저 나와야 한다는 것만 제외하면 declaration-specofier의 순서는 상관없다
	- Storage classes:
		- auto, static, extern, register
		- 선언마다 1개의 storage class를 붙일 수 있으며 항상 선언문 가장 처음에 나온다
	- Type qualifiers:
		- const, volatile, register(C99)
		- A declaration may contain zero or more type qualifiers
	- Type specifiers
		- void, char, int, ... 
		- struct, enum, ...
		- typedef를 통해 정의된 타입 이름도 여기 포함된다
		- type specifiers의 순서는 상관없다
	- Function specifier (C99)
		- inline
		- 함수 선언 시에만 사용됨
- declarators 는 이름을 부여하고 속성에 대한 추가적인 정보를 줄 때도 있다
	- identifiers (name of simple variables)
	- identifiers followed by [] (array names)
	- identifiers preceded by * (pointer names)
	- identifiers followed by () (function names)
	- seperated by commas
	- 변수를 나타내는 declarator 뒤에는 initializer가 붙을 수도 있다
	
<Properties of variables>
- C의 변수들은 3가지 properties를 가진다
- Storage duration
	- 변수를 위한 메모리가 언제 할당되고 해제되는지를 결정한다
	- automatic storage duration을 가진 변수는 surrounding block이 실행될 때 메모리에 할당되고 블럭이 끝날 때 해제된다
	- static storage duration을 가진 변수는 프로그램이 돌아가는 동안 계속 같은 메모리 위치에 존재한다. (다시 변수 값을 얻을 수 있다)
- Scope
	- 변수가 '참조될 수 있는' 범위를 의미한다
	- block scope: 선언된 순간부터 block이 끝날 때까지 visible
	- file scope: 선언된 순간부터 file이 끝날 때까지 visible
- Linkage
	- 변수가 프로그램의 다른 부분에서 공유되는 것을 관리
	- external linkage: 프로그램의 여러 파일에서 공유될 수 있다
	- internal linkage: 한 파일에서만 사용할 수 있도록 제한된다. 같은 파일의 다른 함수에서는 사용될 수 있다
	- no linkage: 한 함수에서만 사용된다
	- linkage가 없는 변수는 같은 이름이어도 다른 변수로 취급된다

- block 안에서 선언된 변수는 automatic storage duration, block scope, no linkage
- block 밖에서 선언된 변수는 static storage duration, file scope, external linkage

<The auto storage class>
- legal only for variables that belongs to a block
- 블럭 안에서 선언된 모든 변수는 auto를 기본값으로 가지기 때문에 일부러 이걸 써주는 경우는 드물다

<The static storage class>
- block 밖에서 쓰였을 경우: external linkage 에서 internal linkage 로 바뀐다
	- 다른 파일에서 변수에 접근할 수 없게 만든다!
- block 안에서 쓰였을 경우: auto storage duration 에서 static storage duration 으로 바뀐다
	- auto variable이 블럭이 끝날 때마다 값을 잃는 것과는 달리 static variable은 값을 유지한다
	- static 변수는 프로그램이 실행되기 전에 초기화되고 auto 변수는 등장할 때마다 초기화된다 (initializer가 존재한다는 가정 하에)
	- 재귀함수를 사용할 때 auto 변수는 매번 새로 만들어지지만 static 변수는 모든 재귀에서 공유된다
	- 함수는 auto 변수의 포인터를 반환할 수 없지만 static 변수의 포인터는 반환가능하다
	
<The extern starage class>
- 여러 소스파일이 같은 변수를 공유할 수 있게 만든다
extern int i;
- 윗줄은 i의 declaration이지만 definition이 아님에 주의!
- 위 선언은 프로그램의 다른 부분에서 정의된 i에 대한 접근이 필요하다는 것을 컴파일러에게 알려주는 역할이다
! extern을 썼더라도 변수를 initializer로 초기화하는 경우 definition에 해당된다. (선언은 몇 번이든 할 수 있는데 여러 초기화값이 나와 값이 겹치면 안되므로)
- 항상 static storage duration
- inside block - block scope, ouside block - file scope
- if the variable was declared static outside of any function definition, it has internal linkage (그 외의 일반적인 경우는 external linkage)

<The register storage class>
- 선언문에 register를 추가하면 변수를 일반 메모리가 아닌 레지스터에 추가하라고 요청할 수 있다
- 이때 명령이 아닌 요청임에 유의. 컴파일러는 여전히 변수를 메모리에 추가할 수 있다
- only legal for variables declared in a block
- auto 변수와 비슷하지만 결정적으로 '주소가 없다'는 특징이 있다 (C표준에서는 레지스터 주소를 없다고 여김) (...레지스터 주소에 관해서는 나중에 다시 알아보도록 하자)
- 때문에 &연산자를 사용할 수 없고 이는 컴파일러가 변수를 메모리에 저장했을 경우에도 마찬가지이다 (인터넷 보니까 잘못 만든 컴파일러는 허용하는 경우도 있다고 하더라...)
* register는 속도가 빨라지기 때문에 최적화에도 쓰이지만 포인터를 이용해 수정할 수 없는 변수를 만들 때도 사용된다

<The storage class of a function>
- 함수의 선언에는 extern 과 static 이 쓰일 수 있다
- extern
	- external linkage
	- allowing it to be called from other files
- static
	- internal linkage
	- limit the use of the function's name to the file in which it's defined
- storage class가 특정되지 않으면 external linkage 가 된다
	- 그래서 변수를 auto로 설정하는 것과 마찬가지로 함수를 extern으로 설정하는 것은 아무 효과도 없다
- 함수를 static으로 설정함으로써 얻을 수 있는 이득
	- 함수가 다른 파일에 관여하기 어렵게 만들어 관리가 편해진다
	- 함수 이름이 다른 파일에서 쓰여도 상관없기 때문에 이름 중복 관리가 편해진다

- parameter에서 특정될 수 있는 storage class는 register가 유일하다

<Summary>
- static 과 extern을 잘 알아두자
- auto는 의미가 없고 register는 컴파일러의 발전으로 효과를 보기 힘들어졌다

<Type qualifiers>
- const, volatile(limited to low-level programming), restrict(C99, used only with pointers)
- const 는 변수를 '읽기 전용' 으로 만든다 (값에 접근만 가능하고 변경이 불가능하다)
* embedded sydtem에서 ROM에 저장해야 할 데이터를 지정하는 효과를 가진다네용
** #define으로 상수를 지정하는 방식과 비교되는 점은 const는 아무 type이나 가능하다는 것
*** 대신 배열의 길이를 매크로로 지정하는 것은 가능하나 const변수로 지정하는 것은 automatic storage duration을 가진 배열에서만 가능

<Declarators>
- consists of an identifiers (변수나 함수의 이름) preceded by * or followed by [] or ().
- *로 시작하는 declarator는 포인터를 표현한다
int *p;
- []로 끝나느 declarator는 배열을 표현한다
	- 대괄호는 매개변수로 들어가는 경우, initializer 가 있는 경우, extern storage class 인 경우 안을 비워둘 수 있다
	*  extern storage class 인 경우 다른 곳에서 정의가 되어 있을 것이므로 굳이 배열의 길이를 알 필요가 없다
	- 매개변수로 쓰이는 경우 static을 통해 배열의 최소 길이를 나타내거나 *를 이용해 배열이 VLA라는 걸 보여줄 수 있는데 9장에 자세히 써놓았네용
- ()로 끝나는 declarator는 함수를 표현한다
	- 함수의 선언에서 매개변수의 이름을 생략할 수 있다
	! 함수 뒤에 붙는 괄호를 아예 비워두는 것과 void를 넣는 것은 다르다.
	!2 void는 매개변수가 없음을 알려주지만 비워두는 것은 컴파일러가 함수가 올바른 전달인자를 받았는지 판단할 수 없게 만든다
	
<Deciphering Complex Declarations>
- declarator 가 단순하면 좋겠지만 대괄호, 괄호, 아스타리스크가 중구난방으로 섞여 있는 경우도 있다
- 이럴 경우 어떻게 하냐?
	- Always read declarators from the inside out
	- []와 ()를 *보다 우선해라
- 불가능한 것들
	- 함수는 배열을 반환할 수 없다
	- 함수는 함수를 반환할 수 없다
	- 함수의 배열도 존재하지 않는다
* 위 불가능할 것들을 모두 '포인터'를 통해 해결할 수 있다.
** 배열과 함수의 포인터를 반환하고 함수의 포인터의 배열을 선언할 수 있다

<Using type definitions to simplify declarations>
- 예를 하나 들겠음 // 워낙 복잡하다 보니..
int *(*x[10])(void);
- 위의 복잡한 declarator를 간단하게 만들기 위해 typedef를 여러번 사용하여 간단하게 만들 수 있다
typedef int *Fcn(void); // Fcn은 전달인자가 없고 int의 포인터를 반환하는 한수다
typedef Fcn *Fcn_ptr; // Fcn_ptr은 Fcn 타입을 가리키는 포인터다
typedef Fcn_ptr Fcn_ptr_array[10]; //Fcn_ptr_array 는 Fcn_ptr의 배열이다
Fcn_ptr_array x;

<Initializers>
- declarators 뒤에 =를 붙여서 변수의 초기 값을 설정할 수 있다. (assignment와는 다르다)
- 초기화 값과 변수의 타입이 맞지 않으면  assignment와 같은 방식으로 type conversion을 한다
- 변수가 static storage duration을 가지고 있으면 초기화값이 상수여야 하다
- automatic storage duration이면 상수가 아니어도 된다.
- 중괄호로 초기화 할 때 중괄호 안의 값은 상수여야 한다 (C99에서는 static storage duration일 때만 상수여야 한다는 제한이 붙는다)
- automatic structure나 union은 다른 구조체나 공용체로 초기화할 수 있다
* 함수의 반환값으로 초기화할 수도 있음 (automatic 한정)

<Uninitialized variables>
- auto variable 은 초기값을 모른다
- static variable은 초기값이 0이다
	- 이때 calloc 처럼 모든 비트값이 0인 것이 아니고 int면 0, 포인터면 NULL 같이 타입에 맞게 0으로 초기화된다
	* 물론 0으로 초기화할 때는 initializer가 필요없지만 써주는 게 좋은 게, 다른 사람이 코드를 읽을 때 이걸 0으로 가정한 건지 다른 데서 값을 할당한 건지 모를 수 있기 때문이다.

<Inline function (C99)>
- 함수를 호출하고 전달인자의 값을 복사하는 것도 자원을 소모한다
- 호출을 줄이기 위해 parameterized macro를 사용하는 방법도 있지만 이는 단점이 많다
- 때문에 inline 키워드를 사용한다.
- inline은 함수의 호출을 '함수와 같은 행동을 하는 기계어'로 변환시킨다
! inline은 오버헤드를 줄일 수 있지만 컴파일한 프로그램의 크기를 키우기도 한다 (조금이지만)
- inline 도 register처럼 제안이지 꼭 해야 하는 것이 아니기 때문에 컴파일러에 따라 inline expansion을 하지 않는 경우도 있다.

<Inline definitions>
- inline function은 기본적으로 external linkage를 갖지만 external이 아닌 inline definition을 가지기 때문에 다른 파일에서 호출하면 에러가 난다
- 이걸 막기 위해 2가지 방법을 쓴다
	- 함수에 static을 붙여 internal linkage로 바꿔 아예 다른 파일에서 호출을 못하게 한다
	- 인라인으로 함수가 정의된 헤더파일을 포함하는 소스파일에 extern으로 함수를 선언하면 다른 소스파일에서는 헤더파일을 포함시킴으로써 함수를 호출할 수 있다
	
<Restrictions on inline functions>
- inline functions with external linkage have some restrictions
	- may not define a modifiable static variables
	- may not contain references to variables with internal linkage
	
* gcc 에서는 -O 옵션을 통해 최적화를 켜야 inline 이 사용된다

* VLA의 경우 블럭이 시작할 때가 아니라 VLA가 선언될 때 메모리가 할당된다
** scope는 컴파일러를 위한 거고 linkage는 linker를 위한 것이다
