<Pointers and arrays>
- 포인터가 배열의 원소를 가리키고 있으면 덧셈 뺄셈이 가능하다
- 배열을 다룰 때 포인터를 다루는 게 옛날에는 효율적이었지만 요즘에는 컴파일러가 발전해서 비슷비슷하다고 하네용

<Pointer Arithmetic>
- C supports 3 forms of pointer arithmetic
	- Adding an integer to a pointer
	- Subtracting an integer from a pointer
	- Subtracting one pointer from another

<Adding an integer to a pointer>
- if p points to the array element a[i], p+j points to a[i+j]
- 포인터에 정수 j를 더하면 원래 자리에서 j만큼 뒤에 있는 원소를 가리키게 된다 (j에 포인터가 가리키는 타입의 크기만큼을 곱해서 더한다. int형의 경우 4*j 를 더하는 식이다)

<Subtracting an integer from a pointer>
- if p points to the array element a[i], then p-j points to a[i-j]

<Subtracting one pointer from another>
- 한 포인터에서 다른 포인터를 뺀 결과는 두 포인터가 가리키는 원소 사이의 거리이다(거리는 원소의 메모리상 크기를 단위로 측정된다)
* 포인터가 배열의 원소를 가리키고 있지 않은 경우, 두 포인터가 가리키는 배열이 다른 경우 결과를 예측할 수 없다

<Comparing pointers>
- 같은 배열의 원소를 가리키는 포인터끼리의 비교만 의미있다
- 배열의 뒤쪽에 위치한 원소를 가리키는 포인터가 크다고 판단한다

<Pointers to compound literal>
- compound literal로 이름없는 배열을 만들 수 있다
int *p = (int[]){3 ,0 ,3 ,4 ,1}; //p는 5개의 원소로 이루어진 배열 중 첫번째 원소를 가리키게 된다(배열을 먼저 선언하고 포인터가 배열을 가리키게 하는 작업을 없애준다)

<Using pointers for array processing>
- 포인터에 정수를 더하고 빼는 것으로 배열의 원소에 접근할 수 있다는 점을 이용하여 반복문에 활용할 수 있다 (예를 들면 포인터에 1씩 더하면서 모든 배열의 원소에 접근하는 식이다)
- 실행시간을 아끼기 위해 사용되지만 컴파일러에 따라 더 느려지는 경우도 있다고 하네용

<Combining the * and ++ operators>
- ++연산자가 *연산자보다 먼저 실행된다
- *p++ 는 *(p++) 와 같다 (p 자체가 증가한다) //반복문에서 많이 쓴다고 함
- (*p)++ (p가 가리키고 있는 값이 증가한다)
- *++p 는 *(++p) 와 같다 (p 자체가 증가한다)
- ++*p 는 ++(*p) 와 같다 (p가 가리키는 값이 증가한다)

<Using an array name as a pointer>
- the name of an array can be used as a pointer to the first element in the array
- 배열 이름도 포인터처럼 *연산자를 이용해 값에 접근할 수 있다
- 배열의 이름이 포인터처럼 쓰이긴 하지만 배열 이름의 값을 바꾸는 것은 불가능하다 (덧셈 등의 연산을 통해 원소 값에 접근하는 것은 가능하다)
	* 근데 매개변수로 쓰이면 값을 바꿀 수 있다

<Array arguments>
- 함수에 전달되면 배열 이름은 포인터처럼 다뤄진다
- 일반적인 변수가 함수에 전달되면 값이 복사되기 때문에 매개변수를 수정하는 것은 원래 변수의 값에 영향을 못 끼친다
- 배열의 경우 배열 자체의 복사본은 만들어지지 않는다 (따라서 배열의 크기는 함수에 배열이 전달되는 데 걸리는 시간에 영향을 주지 않는다)
- 함수에 배열을 매개변수로 전달할 때 포인터로 전달하는 것도 가능하다
	* 매개변수로 전달될 때는 a[] 와 *a 가 완전히 동일하다
* 배열 매개변수의 선언을 포인터로 하는 것은 가능하나 배열 변수의 선언을 포인터로 하는 것은 불가능하다 (포인터의 경우 무작위 메모리 위치를 가리키고 있기 때문이다)

<Using a pointer as an array name>
- 배열이름을 포인터처럼 쓸 수 있듯이 포인터도 배열이름처럼 사용가능하다
- 포인터 p로 p[3]처럼 원소에 접근하는 것도 가능하다
* a[i] 는 i[a]와 같다. 컴파일러는 i[a]를 *(i+a) 로 보고 (i와 a를 더한 포인터가 가리키는 값) 이건 *(a+i) 와 같으며 a[i]로도 쓸 수 있다. 물론 이런 식으로 사용하는 건 헷갈리기 때문에 지양하는 것이 좋다

<Processing the elements of a multidimensional array>
- C stores two-dimensional arrays in row-major order (row 0 come first, followed by row 1 and so forth)
- 2차원 배열의 원소에 순서대로 접근하려면 2개의 반복문을 겹쳐 사용할 수도 있지만 2차원 배열을 1차원으로 보고 배열 원소 하나의 크기만큼만 메모리를 이동하며 접근할 수도 있다
* 위처럼 2차원배열을 1차원으로 보고 처리하는 방식은 이해하기 힘들다는 단점도 있고 최근 컴파일러들은 어차피 이렇게 해도 큰 성능향상을 기대하기 힘들다고 하네용
** 심지어 1차원 배열의 길이를 측정하고 길이가 넘어가면 에러를 띄우는 컴파일러들도 있어서 위험한 방법임

<Processing the rows of a multidimensional array>
- 2차원 배열 a[i][j]에서 a[i]는 i행의 첫번째 원소를 가리키는 포인터이다
- 1차원 배열을 전달인자로 필요로 하는 함수에 a[i]를 넣어서 i행에 한해서 함수가 실행되도록 할 수 있다

<Processing the Columns of a multidimensional array>
- (*p)[i] 의 경우 p는 크기가 i인 배열 자체를 가리키게 된다
- 배열의 이름의 경우 배열의 첫번째 원소를 가리키고 있으나 배열을 가리키는 포인터의 경우 배열 자체를 가리키므로 배열의 주소값이 배열을 가리키는 포인터가 된다
p = &arr; // 이런 식으로 값을 할당
- 배열을 가리키는 포인터의 경우 정수덧셈연산 시 한 step이 배열의 크기가 된다. (2차원 배열의 경우 다음 행 같은 열 자리를 가리키게 된다)

<Using the name of a multidimensional array as a pointer>
- a[NUM_ROWS][NUM_COLS]가 있을 때 a가 가리키는 것은 a[0][0](첫 원소)이 아니라 a[0] (첫 행)이다
* a[0][0] 을 가리키는 포인터는 a[0] 이다
- a의 타입은 int (*) [NUM_COLS] // NUM_COLS크기의 int 배열을 가리키는 포인터

<Pointers and variable-length array C99>
- declaration of a variably-modified type must be inside the body of the function or in  a function prototype
	외부에서 길이가 변수인 배열을 정의하고 사용할 수 없다는 것 같다
