EXPRESSIONS 

Variables and constants are the simplest expressions.
A variable represents a value to be computed as the program runs; a constant represents a value that doesn't change.
Complicated expressions apply operators to operands.

Type of basic operators
- arithmetic operators (+,-,*,/)
- relational operators(< , >)
- logical operators (&, ||, ...)

unary operators
- + (like +1)
- - (like -1)

binary operators
- +, -, *, / ,%
- allow either integer or floating-point operands (% is an exception)
- when integer and float type operands are mixed, the result will have type float
- / 연산자는 연산대상이 모두 정수일 경우 나눗셈 후 나머지를 버린다
- % 연산자는 두 항 모두 정수일 때만 컴파일이 된다.
- /와% 연산자의 오른쪽 값을 0으로 하면 컴파일 결과를 예측할 수 없다.
- /와 % 연산자의 연산대상이 하나는 양수이고 하나는 음수일 경우
  - C89에서는 나누기 연산이 올림처리될 지 아니면 버림 처리될지 알 수 없다. 
  - C99에서는  / 연산은 0에 가까운 값으로 반올림되고 % 연산의 결과값은 앞의 연산대상의 부호를 따른다. 

연산자의 우선순위와 연관성
C는 모든 연산자에 대하여 괄호를 통하여 우선순위를 정하는 것을 허용하고 있다.
괄호가 없으면 연산우선순위 규칙을 통해서 우선순위를 정한다.

연산우선순위가 같을 경우 associativity를 기준으로 연산순서를 정한다. 
binary arithmetic operator의 경우 left-associative, 왼쪽부터 연산을 하게 되어있다.
unary arithmetic operator의 경우 right-associative, 오른쪽부터 연산을 한다.

<ASSIGNMENT OPERATORS>

simple assignment
- = operator
effect of the assignment v = e
- evaluate the expression e 
- and copy its value into v
- If v and e have different types, the value of e is converted to the type of v
- = 는 C언어에서 연산자이다. 따라서 연산의 결과도 존재하는데 v=e 연산의 결과는 =연산 후의 v의 값이다
- = assignment is right-assosiative, which means i = j = 0; is  equal to i = (j = 0);

Lvalues
- assignment operator requires an lvalue as its left operand.
- lvalue represents an object stored in computer memory, not a constant or the result fo a computation
- 변수같은 건 lvalue이지만 연산식같은 건 lvalue가 아니다

Compound assignment
- i = i+2; 같은 할당식을 i += 2; 처럼 줄여 쓸 수 있다.
- 단, 줄여 쓸 수 있다고 해서 같은 것은 아니다. 연산 우선순위 등 사소한 차이가 있으므로 같다고 생각하지는 말 것
- compound assignment is right-associative

Increment and decrement operators
- ++ and -- operator
- can be used as both prefix and postfix operators
- evaluating the expression ++i yields i+1 and increments i (increment i immediately)
- evaluating the expression i++ produces the result i, but causes i to be incremented afterwards (increment later)
- C는 postfix increment/decrement operators 가 언제 값을 변화시키는지 정의하고 있지 않다. 다음 statement 전에 적용된다는 것만 확실하다.
* the postfix version of ++ and -- have higher precedence than unary + and - and are left-assocative; the prefix version have lower precedence and right-assocative

Expression Evaluation
- Apply precedence first, and take associativity into account

Order of Subexpression Evaluation
- C doesn't define the order in which subexpressions are evaluated (In (a+b)*(c+d), we don't known whether (a+b) will be evaluated before (c+d) )
- 한 구문 안에서 변수의 값을 할당하고 동시에 연산을 하려고 시도하면 변수의 값을 알 수 없게 되는 경우가 있으므로 이러한 방식의 프로그래밍은 지양해야 한다.
- Undefined behavior
    - According to the C standard, statements such as c = (b=a+2) - (a=1); and j = i * i++; cause undefined behaviour
    - program may behave differently when compiled with different compilers
    - 컴파일이 안될 수도 있고 아예 이상한 값이 나와버릴 수도 있고, 결과적으로 '예측불가능'하다. 따라서 지양하자
    
Expression Statements 
- C has an unusual rule that any expression can be used as a statement
- 예를 들면 ++i 라는 수식은 세미콜론을 붙여서 ++i; 라는 statement로 변환될 수 있다
* i + j; 처럼 결과가 연산되고 바로 사라져버리는 statement를 작성하는 것도 가능하다






