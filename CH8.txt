Arrays

<One-dimensional arrays>
- all of elements have the same type
- 개념적으로는 같은 타입의 원소가 일렬로 나열되어 있는 (1차원 배열의 경우) 것이라고 생각하면 된다
- 배열을 선언하기 위해서는 배열의 원소의 타입, 배열의 길이, 2가지가 필요하다

<Array Subscripting>
- To access a particular element of an array
- numbered starting from 0
- expressions of the form a[i] are lvalues (일반 변수처럼 사용될 수 있다)
- 일반적으로 배열의 원소의 타입이 T라고 하면 배열의 원소들은 타입이 T인 변수처럼 다뤄진다
* the array subscript (대괄호 안에 들어가는 인덱스) can be any integer expression - can have side effects (like i++)

<Array Initialization>
- the most common form
  int a[10] = {1,2,3};
- If the initializer is shorter than the array, the remaining elements of the arruy are given the value 0
* it is illegal for an initializer to be empty (중괄호 안을 완전히 비워두는 것은 안됨)
** illegal for an initializer to be longer than the array (배열보다 많은 원소로 초기화하는 것도 안됨)
- If an initializer is present, the legth of the array may be omitted in the declaration

C99's designated initializer
- has the form
  int a[15] = {[2]=29, [9]=7, [14]=48};
- 특정 원소만 초기화하고 나머지 원소들을 0으로 둘 수 있다
- 이때 원소의 순서는 상관이 없다
- 배열의 길이가 정의되지 않았으면 가장 인덱스가 큰 원소를 마지막 원소로 보고 길이가 결정된다
- dedignated element can be used together with ordinary element (ordinary element's index starts from last designated element)

<Using the sizeof Operator with Arrays>
- the sizeof operator can determin the size of array in bytes
- one way to measure the length of the array
  sizeof(a)/sizeof(a[0])
* sizeof produces a value of type size_t (unsigned)
  배열의 길이를 재기 위해 sizeof를 사용하는 경우 음수가 사용되지 않으므로 결과가 잘못 나올 일은 없지만 에러메세지는 뜰 수 있다
  
<Multidimensional Arrays>
- two dimensional array 
  int m[i][j];
- 사각형의 테이블의 형태로 생각될 수 있으나 실제로 메모리에 저장될 때는 일렬로 저장된다
- one dimensional initializer를 순서대로 brace에 넣는 것으로 초기화 할 수 있다.
* 중괄호가 꼭 필요하지는 않지만 이걸 사용하지 않으면 그냥 원소가 행 관계없이 순서대로 들어가므로 의도와는 다르게 초기화될 수 있음
** designated initializer can be used 
  double ident[2][2] = {[0][0] = 1.0, [1][1] = 1.0};

<constant arrays>
- 일차원, 다차원 배열은 앞에 const를 붙여 선언하여 상수배열로 만들 수 있다.
* const가 배열 말고 일반 변수에도 쓰일 수 있는데 배열에 특히 쓸모있는 이유는 배열이 참조 목적으로 만들어졌을 경우 값을 변경하지 않도록 하는 것이 중요하기 때문이다

<variable-length arrays>
- length of the array is computed when it is executed not when it is compiled
- programmer doesn't have to pick an arbitrary length when declaring an array
