<Functions>

<Defining and calling functions>
- return type: the type of data that the function returns each time ti's called
- parameters: input that will be supplied when the function is called (type must be declared for EACH parameter)

- To call a function, write function name followed by a list of arguments
- 함수를 호출한다 -> 함수에 전달된 arguments를 복사하여 함수의 parameter값으로 넣고 함수를 실행시킨다
- argument는 꼭 변수일 필요는 없고 타입이 같은 표현식도 가능하다
* parameter: 매개변수, argument: 전달인자
- argument가 없으면 괄호 안에 void가 들어간다. 함수를 호출할 때는 빈 괄호를 넣는다. (전달인자가 없다고 해서 괄호를 넣지 않을 수는 없다)

<return type>
- Fuctions may not return arrays (이외에 다른 제약은 없다)
- void 를 return type으로 가지는 함수는 반환값이 없다 (없어야 한다)
- C89에서는 return type이 없으면 int로 가정한다. C99에서는 반드시 return type이 있어야 한다
* unsigned long int처럼 return type이 길면 한 줄 위에 적는 방법도 있다고 하네용

- variables declared in the body of a function belong exclusively to that function
- C89에서는 변수 선언이 모든 statement 전에 와야 하지만 C99에서는 섞어도 된다 (대신 변수가 쓰이기 전에 선언은 해야 한다)

<Function calls>
- call of a void funtion is followed by a semicolon
- call of a non-void function produces a value
- (void) can be put before function call --> discard the return value of the function
* C 라이브러리 중에는 일반적으로 반환값이 그냥 무시되는 함수들이 많아서 저자는 (void)를 붙이는 걸 생략하기로 했다네요. 귀찮아서...ㄷㄷ
- 다른 함수에서는 같은 이름의 변수를 사용해도 되는데 이는 사용하는 메모리 공간이 다르기 때문이다 (매개변수의 경우도 마찬가지다)

<Function declaration>
- 함수 정의를 함수 뒤에 놓을 수도 있지만 그러면 컴파일러가 처음 함수를 봤을 때 함수에 대한 정보가 없어 정수형으로 가정하고 프로그램을 실행하는데 이후에 함수의 타입이 정수형이 아니면 에러메세지를 띄우게 된다
- 이를 막기 위해 함수의 선언을 먼저 해놓고 정의를 뒤에 하는 경우가 있다.
- 함수의 prototype은 전달인자의 개수, 유형 그리고 반환값의 유형을 main함수에 알려준다
* prototype에서는 전달인자의 이름을 생략할 수 있다
** C99에서는 함수 선언이나 정의 없이 함수를 호출하는 것은 에러메세지를 띄운다

<arguments>
- 함수가 호출되면 argument의 값이 parameter에 복사된다. 이는 복사된 값이기 때문에 parameter의 변화는 argument의 값에 영향을 미치지 않는다.
- 이런 방식의 장점은 parameter를 함수 내에서 마음대로 수정할 수 있다는 것이다
- 단점은 전달인자를 변화시키는 함수를 작성하기가 까다롭다는 점이다

<Argument Conversions>
- C는 전달인자와 매개변수의 유형이 같지 않은 경우에도 호출을 허용한다
- 만약 함수가 선언이 되어 있다면 전달인자의 값이 매개변수의 유형으로 바뀐다
- 그렇지 않으면 default argument promotion을 하여 float는 double로, char과 short는 int 로 바뀐다 (integral promotion for C89, integer promotion for C99)

<Array Arguments>
- When a function parameter is a one-dimensional array, the legth of the array can be left unspecified
* 매개변수로 길이가 없는 배열이 주어졌을 때, 그냥 sizeof를 때려버리면 되는 거 아닌가? 라고 생각했다면 틀렸다. sizeof는 배열 변수의 길이는 반환할 수 있지만 매개변수의 경우에는 잘못된 값을 반환할 수 있다. 이에 대해서는 12장에서 더 자세히 설명한다고 하네용
- 배열 이름을 전달인자로 쓸 때는 []를 생략하고 배열이름만 사용한다.
예)  b[]라는 배열이 있고 a라는 함수에 전달할 때: a(b) 가 맞고 a(b[])는 틀리다 (설명을 위해 정확한 정의를 사용하지 않았음에 유의)
- C는 함수에 매개변수에 복사된 값으로 전달된 배열의 원소를 수정할 수 있다 (포인터 덕분인데 아직 설명 안 해줌 ㅋ)
- 다차원배열의 경우 첫번째 차원배열의 길이만 생략할 수 있다.

<Variable-Length Array Parameters> C99
- 변수를 배열의 길이로 사용할 수 있는 것을 사용해 아래와 같이 표현가능
int sum_srray(int n, int a[n])
- 이때 두 매개변수의 순서가 중요하다 (n이 정의되고나서 사용해야 한다)
- In Function prototype, * can be used to represent the relationship between the length of the array and the parameter came earlier
int sum_array (int n, int a[*]);

<Using static in Array Parameter Declaration> C99
- 전달인자로 전달되는 배열의 길이 앞에 static을 붙이면 배열의 길이가 최소 그 길이만큼 된다는 것이 되어 컴파일러가 더 빠르게 동작을 수행할 수 있게 한다.
- 다차원 배열의 경우 첫번째 차원에만 쓸 수 있다.

<Compound Literals>
- 함수에 호출하는 목적으로만 배열을 정의하는 것이 비효율적일 수도 있다?
- 그래서 그냥 함수를 호출할 때 전달인자로 배열을 정의하면서 호출할 수 있다 ㄷㄷ
total = sum_array((int[]){3,0,3,4,1}, 5);
- 위의 예에서는 배열의 길이가 원소 개수로 자동으로 정해지도록 놔뒀지만 직접 정의할 수도 있다
- compound literal은 lvalue이기 때문에 값이 수정될 수 있고 이걸 막고 싶으면 const를 붙이라네용

<The return Statement>
- non-void function must use return statment to specify what value it will return
- 반환값이 함수의 선언에 명시된 반환유형과 다르면 implicit conversion으로 타입이 바뀐다
- If non-void function reaches the end of the body, its behavior is undefined if it attempts to use the value returned by the function

<Program Termination>
- 메인 함수는 일반적으로 프로그램이 정상적으로 종료되었는지를 알려주는 상태코드를 반환한다. 0은 정상, 이외는 비정상적인 종료다

<The exit Function>
- in <stdlib.h>
exit(0); // normal termination
exit(EXIT_SUCCESS); // normal termination
exit(EXIT_FAILURE); //abnormal termination
- EXIT_SUCCESS와 EXIT_FAILURE는 stdlib.h에 매크로로 정의되어 있다. 보통 0과 1
- return(expression); 과 exit(expression); 은 main 함수에 있을 경우 같다
- 다른 점은 return 은 main에 있을 때만 프로그램을 종료시키지만 exit은 어느 함수에 있든 프로그램을 종료시킨다는 점이다

<Recursion>
- 자기를 호출하는 걸 재귀라고 한다
- 재귀함수는 끊임없이 자기를 호출하는 걸 막기위해 정지 포인트를 만들어놓아야 한다(근데 이건 반복문이면 다 해당되는 거 아닌감)
- 분할점령에 많이 쓰이는데 큰 문제를 작은 문제로 나눈 후 같은 알고리즘을 적용시키는 방식을 말한다.
- 퀵 정렬이 그 예
