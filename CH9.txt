<Functions>

<Defining and calling functions>
- return type: the type of data that the function returns each time ti's called
- parameters: input that will be supplied when the function is called (type must be declared for EACH parameter)

- To call a function, write function name followed by a list of arguments
- 함수를 호출한다 -> 함수에 전달된 arguments를 복사하여 함수의 parameter값으로 넣고 함수를 실행시킨다
- argument는 꼭 변수일 필요는 없고 타입이 같은 표현식도 가능하다
* parameter: 매개변수, argument: 전달인자
- argument가 없으면 괄호 안에 void가 들어간다. 함수를 호출할 때는 빈 괄호를 넣는다. (전달인자가 없다고 해서 괄호를 넣지 않을 수는 없다)

<return type>
- Fuctions may not return arrays (이외에 다른 제약은 없다)
- void 를 return type으로 가지는 함수는 반환값이 없다 (없어야 한다)
- C89에서는 return type이 없으면 int로 가정한다. C99에서는 반드시 return type이 있어야 한다
* unsigned long int처럼 return type이 길면 한 줄 위에 적는 방법도 있다고 하네용

- variables declared in the body of a function belong exclusively to that function
- C89에서는 변수 선언이 모든 statement 전에 와야 하지만 C99에서는 섞어도 된다 (대신 변수가 쓰이기 전에 선언은 해야 한다)

<Function calls>
- call of a void funtion is followed by a semicolon
- call of a non-void function produces a value
- (void) can be put before function call --> discard the return value of the function
* C 라이브러리 중에는 일반적으로 반환값이 그냥 무시되는 함수들이 많아서 저자는 (void)를 붙이는 걸 생략하기로 했다네요. 귀찮아서...ㄷㄷ
- 다른 함수에서는 같은 이름의 변수를 사용해도 되는데 이는 사용하는 메모리 공간이 다르기 때문이다 (매개변수의 경우도 마찬가지다)

<Function declaration>
- 함수 정의를 함수 뒤에 놓을 수도 있지만 그러면 컴파일러가 처음 함수를 봤을 때 함수에 대한 정보가 없어 정수형으로 가정하고 프로그램을 실행하는데 이후에 함수의 타입이 정수형이 아니면 에러메세지를 띄우게 된다
- 이를 막기 위해 함수의 선언을 먼저 해놓고 정의를 뒤에 하는 경우가 있다.
- 함수의 prototype은 전달인자의 개수, 유형 그리고 반환값의 유형을 main함수에 알려준다
* prototype에서는 전달인자의 이름을 생략할 수 있다
** C99에서는 함수 선언이나 정의 없이 함수를 호출하는 것은 에러메세지를 띄운다

<arguments>
- 함수가 호출되면 argument의 값이 parameter에 복사된다. 이는 복사된 값이기 때문에 parameter의 변화는 argument의 값에 영향을 미치지 않는다.
- 이런 방식의 장점은 parameter를 함수 내에서 마음대로 수정할 수 있다는 것이다
- 단점은 전달인자를 변화시키는 함수를 작성하기가 까다롭다는 점이다

<Argument Conversions>
- C는 전달인자와 매개변수의 유형이 같지 않은 경우에도 호출을 허용한다
- 만약 함수가 선언이 되어 있다면 전달인자의 값이 매개변수의 유형으로 바뀐다
- 그렇지 않으면 default argument promotion을 하여 float는 double로, char과 short는 int 로 바뀐다 (integral promotion for C89, integer promotion for C99)
