STRINGS

<String literals>
- is a sequence of characters enclosed within double quotes

<Escape Sequences in string literals>
- String 안에 escape sequence를 넣을 수 있다
* octal escape sequence는 3자리수를 넘어가거나 8진법 숫자가 아닌 수가 나오면 종료된다 (\038의 경우 \03과 8로 인식된다)
** hexadecimal escape sequence 는 자리수의 제한이 없으며 hexadecimal이 아닌 값이 나올 때까지 계속된다 (compiler마다 ff를 넘어가는 값을 무시하는 경우도 있다)

<Continuing a String literal>
- 코드 내에서 \(백슬래시) 이후 줄바꿈을 하는 것으로 string을 이어 쓸 수 있다 (여러 줄에 걸쳐 쓸 수 있다) 
	이걸 splicing이라고 한다네용
	* splicing을 하는 경우 string이 바로 다음 줄에서 시작해야 한다 (indenting을 할 수 없다)
- when two or more string literals are adjacent (seperated only by white space), the compiler will join them into a single string

<How string literals are stored>
- C treats string literals as an argument
- 길이가 n인 string literal을 만나면  n+1 바이트의 메모리 공간을 확보한다
	- 하나 남는 자리는 null character가 차지한다 (string의 끝을 나타낸다)
	- null character의 바이트는 모든 비트가 0이며 \0으로 표현 가능하다
- string literal은 배열에 저장되기 때문에 컴파일러는  char * 타입의 포인터로 인식한다

<Operations on string literals>
- C는 string literal을 char * 타입의 포인터로 인식하기 때문에 포인터가 쓰이는 곳에는 다 쓸 수 있다
	- char *p; 일 때 p에 "abc"를 할당할 수 있다
	- "abc"[1] 로 b를 나타낼 수 있다 (배열 이름처럼 사용가능하다)
- string literal은 배열처럼 원소를 바꾸려고 하면 오류가 난다

<String literals versus character constants>
- "a"는 포인터이고 'a'는 정수다
- string literal의 경우 문자열이 들어있는 장소를 가리키는 포인터이고 문자상수는 아스키코드표에 따라 문자를 나타내는 정수이다

<String variables>
- char 타입의 1차원 배열은 string을 저장하는 데 사용될 수 있다 (null character로 잘 종료시키기만 하면)
- 이 경우 string의 길이를 아는 가장 빠른 방법은 문자를 하나하나 검색해서 null character를 찾는 방법 뿐이다
	* string을 저장할 배열을 선언하는 경우 원하는 길이보다 1개 길게 만들라고 하네용 (null character를 저장할 공간을 확보하기 위해서이다)

<Initializing a string variable>
- char 배열을 초기화할 때 string literal을 사용해서 초기화 할 수 있다
	- 배열의 길이가 string보다 길 경우 남은 공간을 null character로 채운다
	- 배열의 길이가 string보다 짧을 경우 초기화를 할 수 없다
	! 그런데 만약 배열의 길이가 null character를 제외한 문자열의 길이와 같다면 null character를 제외한 나머지 문자만 저장된다 (이 경우 string으로 인식되지 않으므로 주의!)
	- 배열의 길이가 주어지지 않으면 컴파일러가 자동으로 배열의 길이를 문자열의 길이와 같게 설정한다 (이 경우 직접 길이를 정하는 것보다 좋을 수도 있는 게 긴 문자열의 경우 일일히 문자 개수 세는 게 정확할 리가 없기 때문)
	
<Character arrays versus Character pointers>
char date[] = "June 14"; //date가 배열인 경우
char *date = "June 14"; // date가 포인터인 경우
- 배열의 경우 date라는 배열에 문자들이 저장된 것이므로 원소(문자)들의 수정이 가능하다
- 포인터의 경우 포인터가 string literal을 가리키고 있는 것이므로 문자들의 수정이 불가능하다
- 배열의 경우 date가 배열 이름이지만 포인터의 경우 date는 string을 가리키고 있는 변수이므로 다른 string을 가리키게 할 수도 있다
* 포인터 p가 가리키는 string을 변경할 수 있게 하고 싶으면 새로운 배열을 선언해서 값을 복사하거나 dynamically allocated string을 이용하라고 한다

<Reading and writing strings>
- string의 출력은 쉽다. printf 나 puts 로 그냥 출력하면 되니까
- 입력은 더 어렵다. 주로 입력할 string의 길이가 값을 저장할 배열보다 길 가능성 때문에 문제가 생긴다. string을 한 번에 읽을 때는 scanf나 gets를 보통 쓰고 문자 하나씩 읽는 방법도 있다

<Writing strings using printf and puts>
- %s conversion specification allows printf to write a string
- printf는 null character를 찾을 때까지 string을 읽으며 모든 문자를 출력한다
- %m.ps (p는 출력할 문자의 개수를 의미한다)(m은 최소 출력 문자를 의미하고 문자열이 m보다 짧으면 오른쪽에 붙어서 나온다) (-를 붙여서 왼쪽에 붙어 나오게 할 수 있다)
- puts(str) 은 전달인자로 받은 string을 출력하며 string을 출력한 후 줄바꿈 문자를 출력한다 (항상 다음줄로 넘어간다)

<Reading strings using scanf and gets>
- %s를 사용해서 scanf에서 string을 읽을 수 있고 이때 &연산자를 필요로 하지 않는다 (string은 포인터 취급이기 때문)
- scanf
	1. read white-space characters
	2. reads characters and store them in array (입력받은 포인터를 통해서)
	3. reads until it encounters white-space character
	4. stores a null character at the end of the string
- scanf로는 공백문자를 포함한 문자열을 한 번에 저장할 수 없다
- gets
	- doesn;t skip white spaces before starting to read the string
	- reads until it finds a new-line character //it discards new-line character and stores null character in array instead
* scanf나 gets 모두 input string이 입력받을 배열의 길이보다 긴 지 확인할 방법이 없다 //scanf의 경우 %ns (n이 입력받을 수 있는 string의 최대 길이) 를 사용하여 어느 정도 문제가 해결 가능한데 gets는 걍 불가능... fgets를 쓰라고 하네용

<Reading strings character by character>
- 사용자가 직접 string input function을 디자인할 때는 다음과 같은 점을 고려해야 한다
	- string을 시작하기 전에 공백문자를 스킵할 것인가
	- string의 끝이 되는 문자를 무엇으로 설정할 것이며 이 문자를 string에 포함시킬 것인가
	- 만약 string이 너무 길면 이걸 그냥 버릴 것인가 아니면 다음 input을 위해 남겨둘 것인가
* getchar의 반환값은 int 형이다
** scanf나 gets를 쓸 때와는 달리 직접 input fucntion을 만들어 사용할 때는 null character를 직접 붙여야 한다

<Accessing the characters in a string>
- string은 배열에 저장되므로 배열에 접근하듯이 접근할 수 있다
- string 배열에 순차적으로 접근하는 반복문은 string의 길이를 알 필요가 없는데 이는 null character가 string의 끝을 알려주기 때문이다
- 배열이라는 건 결국 포인터로 사용할 수 있으므로 포인터를 통해 string에 순차적으로 접근할 수도 있다
* 매개변수의 경우 배열, 포인터, string literal 모두 동일하게 취급된다

<Using C string library>
- C는 자체적으로 string을 다루는 함수를 가지고 있지 않은데 이는 C가 string을 배열로 인식하기 때문에 배열에 관련된 연산만 가능하기 때문이다
- 대신에 string을 다루는 라이브러리는 존재한다 //<string.h>
- <string.h> 의 대부분의 함수는 string을 전달인자로 필요로 한다 (정확히는 char * 타입의 전달인자를 필요로 한다)
- 매개변수에 const가 없는 경우: 함수 내에서 string을 수정할 수 있어야 하므로 string literal을 전달인자로 받으면 안된다 (수정을 안 하면 상관없겠지만 그 경우 const를 붙이지 않을까...?)

<strcpy (String Copy) function>
- has a prototype
char *strcpy(char *s1, const char *s2);
- copies s2 into s1 (copies the string pointed by s2 into the array pointed by s1)
- s2의 첫번쨰 null character까지 s1에 복사한다 (s1의 길이가 충분한지는 확인할 수 없다. 만약 넘어가면 모르는 메모리 공간에 저장된다)
- return s1
- strncpy function
	- safer albeit slower
	- has a third argument that limits the number of characters that will be copied
	strncpy(str1, str2, sizeof(str1));
	- str2가 str1의 크기보다 클 경우 정확히 str1의 크기만큼만 복사되기 때문에 마지막에 null character가 복사되지 않아 string으로 인식되지 않을 수 있다
		- 이걸 막기 위해 마지막 character를 null character로 설정하는 등의 조치가 필요하다
		
<The strlen (String Length) function>
- has the prototype
size_t strlen(const char *s);
- size_t는 라이브러리에서 정의된 타입으로 unsigned integer타입이다
- size_t는 입력받은 문자열 s의 첫번째 null character까지의 모든 문자 개수를 정수로 반환한다 (null character는 개수에 포함되지 않는다)
* strlen은 입력받은 배열의 길이를 반환하는 것이 아니라 입력받은 string의 길이를 반환하는 것이다

<The strcat (String Concatenation) function>
- has the prototype
char *strcat(char *s1, const *char *s2);
- strcat은 s1 뒤에 s2를 붙이고 s1을 가리키는 포인터를 반환한다
- str1의 크기가 str1과 str2를 합친 길이보다 작으면 오류가 난다
- strncat function
	- safer albeit slower
	- has a third argument that limits the number of characters that will be copied
	- 복사할 문자열의 최대 길이는 (str1배열의 원래 길이 - str1문자열의 길이 - null 문자를 저장하기 위한 1바이트) 가 된다

<The strcmp (String Comparison) function>
- has the prototype
int strcmp(const char *s1, const char *s2);
- strcmp는 s1과 s2를 비교하고 3가지 값을 반환할 수 있다
	- s1 < s2 // 음수 
	- s1 == s2 // 0
	- s1 > s2 // 양수
- strcmp는 사전식 정렬순서에 따라 대소를 판단한다
- s1 is less than s2 if either one of the following condition is satisfied
	- The first i characters of s1 and s2 match, but the (i+1)st character of s1 is less than the (i+1)st character of s2.
	- All characters of s1 match s2, but s1 is shorter than s2.
- strcmp는 두 string을 비교할 때 character set에 기반한다 (아스키같이 문자마다 할당된 숫자를 비교한다는 소리임)

<String idioms>
* 스탠다드 라이브러리 함수들의 이름은 일반 함수에 사용할 수 없다 (라이브러리를 함수에 불러오지 않았어도 쓸 수 없다)
** str 뒤에 소문자로 시작하는 이름 (예를 들면 strdel) 같은 이름은 모두 사용할 수 없다 (C가 나중에 <string.h>에 추가하려고 남겨둔 항목이라네용)

<Searching for the End of a string>
- search for the null character at the end of a string
while (*s)
	s++; // leaves s pointing the null character
while (*s++)
; // leaves s pointing just past the null character

<Copying a string>
while (*p++ = *s2++)
; //copy s2 to p
- loop terminates after the assignment so we don't need to put a null character at the end of the new string
* 컴파일러에서 경고를 띄울 수도 있는데 assignment의 값을 테스트하고 있기 때문이다. gcc의 경우 바깥에 괄호를 하나 더 쳐주면 오류가 사라짐
while ((*p++ = *s2++))
; // avoid error msg

<Array of strings>
- string의 배열을 구현하기 위해서 2차원 char 배열을 정의하고 각 행에 문자열을 할당할 수 있다
- 이 경우 행의 길이가 문자열의 최대길이가 되어야 하므로 string의 특성상 (길이가 일정하지 않고 원소별로 차이가 큼) 공간적인 손해가 크다
- 이를 보완하기 위해서 string을 가리키는 포인터의 1차원 배열을 정의하여 ragged array(행의 길이가 제각각인 2차원 배열) 을 구성한다

<Command-line argument>
- Command-line information is available to all programs, not just OS commands
- 프로그램을 실행할 때 추가적인 정보를 입력해야 하는 경우가 있다 (ls 커맨드의 경우 -l 을 붙임으로써 파일들의 더 자세한 정보를 볼 수 있다)
- To obtain access to these command-line arguments (program parameters in C)
	- define main as a function with two parameters (customarily named argc and argv)
* 그래픽 인터페이스같은 경우 프로그램의 실행이 명령줄이 아니라 마우스 클릭같은 걸로 실행될 때도 있기 때문에 C는 program parameter라는 단어를 채택한 것이라고 하네용
int main(int argc, char *argv[])
{
	//main의 내용
}
- argc (argument count)
	- the number of command-line arguments (including the name of program itself)
- argv (argument vector)
	- the array of pointers to the command-line arguments (stored in string form)
	- argv[0] points to the name of the program
	- argv[1] 부터 argv[argc-1]은 나머지 command-line arguments 를 가리킨다
	* argv[argc]는 null pointer이다 (NULL 매크로로 null pointer를 나타낼 수 있다)























